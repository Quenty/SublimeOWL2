%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: OWL2
file_extensions:
  - owl
scope: source.owl
variables:
  ident: '[A-Za-z_][A-Za-z_0-9\\-]*'
contexts:
  main:
    - match: (Ontology)\(
      push: ontology
      captures: 
        1: variable.language

    - match: '"'
      push: string
      scope: punctuation.definition.string.begin

    - match: "<"
      push: irn
      scope: punctuation.definition.generic.begin

    - match: \(
      scope: punctuation.section.parens.begin
      push: parens

    - match: \)
      scope: invalid.illegal.stray-bracket-end

    - match: Prefix
      scope: keyword.control.import
  
    - match: "\\^\\^"
      scope: constant.language

    - match: "\\b[0-9]+\\b"
      scope: constant.numeric

  ontology:
    - meta_scope: meta.namespace
      # Axiom
    - match: \b(Declaration|DatatypeDefinition|HasKey)\b
      scope: variable.language

      # Assertion
    - match: \b(SameIndividual|DifferentIndividuals|ClassAssertion|ObjectPropertyAssertion|NegativeObjectPropertyAssertion|DataPropertyAssertion|NegativeDataPropertyAssertion)\b
      scope: variable.language

      # ObjectPropertyAxiom
    - match: \b(SubObjectPropertyOf|EquivalentObjectProperties|DisjointObjectProperties|InverseObjectProperties|ObjectPropertyDomain|ObjectPropertyRange|FunctionalObjectProperty|InverseFunctionalObjectProperty|ReflexiveObjectProperty|IrreflexiveObjectProperty|SymmetricObjectProperty|AsymmetricObjectProperty|TransitiveObjectProperty)\b
      scope: variable.language

      # AnnotationAxiom
    - match: \b(AnnotationAssertion|SubAnnotationPropertyOf|AnnotationPropertyDomain|AnnotationPropertyRange)\b
      scope: variable.language

      # DataPropertyAxiom
    - match: \b(SubDataPropertyOf|EquivalentDataProperties|DisjointDataProperties|DataPropertyDomain|DataPropertyRange|FunctionalDataProperty)\b
      scope: variable.language

      # ClassAxiom
    - match: \b(SubClassOf|EquivalentClasses|DisjointClasses|DisjointUnion)\b
      scope: variable.language

      # Class
    - match: \b(Class|ObjectIntersectionOf|ObjectUnionOf|ObjectComplementOf|ObjectOneOf|ObjectSomeValuesFrom|ObjectAllValuesFrom|ObjectHasValue|ObjectHasSelf|ObjectMinCardinality|ObjectMaxCardinality|ObjectExactCardinality|DataSomeValuesFrom|DataAllValuesFrom|DataHasValue|DataMinCardinality|DataMaxCardinality|DataExactCardinality)\b
      scope: variable.language

      # Individual
    - match: \b(NamedIndividual|AnonymousIndividual|DatatypeRestriction)\b
      scope: variable.language

      # Other/IRI
    - match: \b(ObjectProperty|AnnotationProperty|Datatype|DataProperty)\b
      scope: variable.language

    - match: "({{ident}})(\\()"
      captures: 
        1: invalid.illegal
        2: punctuation.section.parens.begin
      push: parens

    - match: \)
      pop: true

    - include: main

  irn:
    - meta_scope: string.quoted.other.owl
    - match: "(#)([A-Za-z0-9_-]+)"
      captures:
        1: punctuation.separator
        2: constant.other.placeholder
    - match: ">"
      scope: punctuation.definition.generic.end
      pop: true

  string:
    - meta_scope: string.quoted.double.owl
    - match: \\.
      scope: constant.character.escape.owl
    - match: '"'
      scope: punctuation.definition.string.end
      pop: true

  parens:
    - meta_scope: meta.parens

    - match: \)
      scope: punctuation.section.parens.end
      pop: true

    - match: "(xsd)(:)(string|minInclusive|maxInclusive|long|date|integer|boolean|numerical|nonNegativeInteger)"
      captures:
        1: constant.language
        2: constant.language
        3: storage.type

    - match: "(xsd):{{ident}}"
      scope: invalid.illegal

    - match: "({{ident}})(:)({{ident}})"
      captures:
        1: entity.name.namespace
        2: punctuation.accessor
        3: variable.other

    - include: main
    - include: ontology
  
